#include "sys.h"
#include "uart.h"	
#include <stdlib.h>
////////////////////////////////////////////////////////////////////////////////// 	 
//如果使用ucos,则包括下面的头文件即可.
#if SYSTEM_SUPPORT_OS
#include "includes.h"					//ucos 使用	  
#endif
static u8 n1=0,n2=0,n3=0,n=0;
static u8 data=0;
u8  string2 [32] = {0};
//u8  temp = 0;
u8 data_test = 0;
u8 com_data; 
u8 oled_flag = 0;


#if 1
#pragma import(__use_no_semihosting)             
//标准库需要的支持函数                 
struct __FILE 
{ 
	int handle; 

}; 

FILE __stdout;       
//定义_sys_exit()以避免使用半主机模式    
void _sys_exit(int x) 
{ 
	x = x; 
} 





//重定义fputc函数 
int fputc(int ch, FILE *f)
{      
	while((USART1->SR&0X40)==0);//循环发送,直到发送完毕   
    USART1->DR = (u8) ch;      
	return ch;
}
#endif 

/*使用microLib的方法*/
 /* 
int fputc(int ch, FILE *f)
{
	USART_SendData(USART1, (uint8_t) ch);

	while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET) {}	
   
    return ch;
}
int GetKey (void)  { 

    while (!(USART1->SR & USART_FLAG_RXNE));

    return ((int)(USART1->DR & 0x1FF));
}
*/
 
#if EN_USART1_RX   //如果使能了接收
//串口1中断服务程序
//注意,读取USARTx->SR能避免莫名其妙的错误   	
u8 USART_RX_BUF[USART_REC_LEN];     //接收缓冲,最大USART_REC_LEN个字节.
//接收状态
//bit15，	接收完成标志
//bit14，	接收到0x0d
//bit13~0，	接收到的有效字节数目
u16 USART_RX_STA=0;       //接收状态标记	  
  
void uart_init(u32 bound){
  //GPIO端口设置
  GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	 
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1|RCC_APB2Periph_GPIOA, ENABLE);	//使能USART1，GPIOA时钟
  
	//USART1_TX   GPIOA.9
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; //PA.9
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;	//复用推挽输出
  GPIO_Init(GPIOA, &GPIO_InitStructure);//初始化GPIOA.9
   
  //USART1_RX	  GPIOA.10初始化
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;//PA10
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;//浮空输入
  GPIO_Init(GPIOA, &GPIO_InitStructure);//初始化GPIOA.10  

  //Usart1 NVIC 配置
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3 ;//抢占优先级3
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;		//子优先级3
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			//IRQ通道使能
	NVIC_Init(&NVIC_InitStructure);	//根据指定的参数初始化VIC寄存器
  
   //USART 初始化设置

	USART_InitStructure.USART_BaudRate = bound;//串口波特率
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
	USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位
	USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	//收发模式

  USART_Init(USART1, &USART_InitStructure); //初始化串口1
  USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);//开启串口接受中断
  USART_Cmd(USART1, ENABLE);                    //使能串口1 
	USART_ClearFlag(USART1, USART_FLAG_TC); 
  
////void uart_init(u32 bound){
////  //GPIO端口设置
////  GPIO_InitTypeDef GPIO_InitStructure;
////	USART_InitTypeDef USART_InitStructure;
////	NVIC_InitTypeDef NVIC_InitStructure;
////	 
////	RCC_APB2PeriphClockCmd(RCC_APB1Periph_USART2|RCC_APB2Periph_GPIOA, ENABLE);	//使能USART1，GPIOA时钟
////  
////	//USART1_TX   GPIOA.9
////  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2; //PA.9
////  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
////  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;	//复用推挽输出
////  GPIO_Init(GPIOA, &GPIO_InitStructure);//初始化GPIOA.9
////   
////  //USART1_RX	  GPIOA.10初始化
////  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;//PA10
////  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;//浮空输入
////  GPIO_Init(GPIOA, &GPIO_InitStructure);//初始化GPIOA.10  

////  //Usart1 NVIC 配置
////  NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
////	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3 ;//抢占优先级3
////	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;		//子优先级3
////	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			//IRQ通道使能
////	NVIC_Init(&NVIC_InitStructure);	//根据指定的参数初始化VIC寄存器
////  
////   //USART 初始化设置

////	USART_InitStructure.USART_BaudRate = bound;//串口波特率
////	USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
////	USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位
////	USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位
////	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
////	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	//收发模式

////  USART_Init(USART2, &USART_InitStructure); //初始化串口1
////  USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);//开启串口接受中断
////  USART_Cmd(USART2, ENABLE);                    //使能串口1 
////	USART_ClearFlag(USART2, USART_FLAG_TC);





























//USART1_TX:PA 9   
		//USART1_RX:PA10
		
		
//		GPIO_InitTypeDef GPIO_InitStructure;     //???????????
//		USART_InitTypeDef USART_InitStructure;   //???????????
//		NVIC_InitTypeDef NVIC_InitStructure;     //???????????

//		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);	
//		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);   //??PA????

//    	//USART1_TX   PA9
//    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;          		 //PA9
//   		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;  		 //??IO???????50MHz
//    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;	   		 //??????
//    	GPIO_Init(GPIOA, &GPIO_InitStructure);             	 	 //???PA9
//    	//USART1_RX	  PA10
//    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;             //PA10
//    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  //????
//    	GPIO_Init(GPIOA, &GPIO_InitStructure);                 //???PA10 

//    	//USART1 NVIC ??
//    	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
//		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=0 ;  //?????0
//		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;		    //????2
//		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			      					                 //IRQ????
//		NVIC_Init(&NVIC_InitStructure);	                          //??????????VIC???

//    	//USART ?????
//		USART_InitStructure.USART_BaudRate = 115200;                  //??????115200
//		USART_InitStructure.USART_WordLength = USART_WordLength_8b;   //???8?????
//		USART_InitStructure.USART_StopBits = USART_StopBits_1;        //?????
//		USART_InitStructure.USART_Parity = USART_Parity_No;           //??????
//		USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;   //????????
//		USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	                  //????
//    	USART_Init(USART1, &USART_InitStructure);                     //?????1

//    	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); //????
//   		USART_Cmd(USART1, ENABLE);                     //????1
//	  	USART_ClearFlag(USART1, USART_FLAG_TC);        //???1????
//		

}

void USART1_IRQHandler(void)                	//串口1中断服务程序
	{


#if SYSTEM_SUPPORT_OS 		//如果SYSTEM_SUPPORT_OS为真，则需要支持OS.
	OSIntEnter();    
#endif
	
				 

		u8 i;
		static u8 RxCounter1=0;
		static u16 RxBuffer1[10]={0};
		static u8 RxState = 0;	
		static u8 RxFlag1 = 0;

		if( USART_GetITStatus(USART1,USART_IT_RXNE)!=RESET)  	   //????  
		{
				USART_ClearITPendingBit(USART1,USART_IT_RXNE);   //??????
				com_data = USART_ReceiveData(USART1);
			
				if(RxState==0&&com_data==0x2C)  //0x2c??
				{
					RxState=1;
					RxBuffer1[RxCounter1++]=com_data;
				}
		
				else if(RxState==1&&com_data==0x12)  //0x12??
				{
					RxState=2;
					RxBuffer1[RxCounter1++]=com_data;
					
				}
		
				else if(RxState==2)
				{
					RxBuffer1[RxCounter1++]=com_data;

					if(RxCounter1>=10||com_data == 0x5B)       //RxBuffer1????,??????
					{
						RxState=3;
						RxFlag1=1;
						data_test =RxBuffer1[RxCounter1-2];
					  
					}
				}
		
				else if(RxState==3)		//???????????
				{
						if(RxBuffer1[RxCounter1-1] == 0x5B)
						{
									USART_ITConfig(USART1,USART_IT_RXNE,DISABLE);//??DTSABLE??		
									RxFlag1 = 0;
									RxCounter1 = 0;
									RxState = 0;
									USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);
						}
						else   //????
						{
									RxState = 0;
									RxCounter1=0;
									for(i=0;i<10;i++)
									{
											RxBuffer1[i]=0x00;      //?????????
									}
						}
				} 
	
				else   
				{
						RxState = 0;
						RxCounter1=0;
						for(i=0;i<10;i++)
						{
								RxBuffer1[i]=0x00;      //?????????
						}
				}

		}
		


		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
//		if( USART_GetITStatus(USART1,USART_IT_RXNE)!=RESET)  	   //????  
//		{
//		  	OLED_Clear();
//				USART_ClearITPendingBit(USART1,USART_IT_RXNE);   //??????
//				com_data = USART_ReceiveData(USART1);
////				 sprintf(string2,"" com_data + '0');
//				OLED_ShowChar(20,20 ,com_data + '0',12);
//				
//				
//		}

#if SYSTEM_SUPPORT_OS 	//如果SYSTEM_SUPPORT_OS为真，则需要支持OS.
	OSIntExit();  											 
#endif
	}
#endif	



